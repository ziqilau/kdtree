// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kdtree.proto

#ifndef PROTOBUF_kdtree_2eproto__INCLUDED
#define PROTOBUF_kdtree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KDTreeRec {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_kdtree_2eproto();
void protobuf_AssignDesc_kdtree_2eproto();
void protobuf_ShutdownFile_kdtree_2eproto();

class KDNodeRec;

// ===================================================================

class KDNodeRec : public ::google::protobuf::Message {
 public:
  KDNodeRec();
  virtual ~KDNodeRec();

  KDNodeRec(const KDNodeRec& from);

  inline KDNodeRec& operator=(const KDNodeRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KDNodeRec& default_instance();

  void Swap(KDNodeRec* other);

  // implements Message ----------------------------------------------

  inline KDNodeRec* New() const { return New(NULL); }

  KDNodeRec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KDNodeRec& from);
  void MergeFrom(const KDNodeRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KDNodeRec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isNode = 1;
  bool has_isnode() const;
  void clear_isnode();
  static const int kIsNodeFieldNumber = 1;
  bool isnode() const;
  void set_isnode(bool value);

  // optional uint64 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // optional double axis = 3;
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  double axis() const;
  void set_axis(double value);

  // repeated double point = 4;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 4;
  double point(int index) const;
  void set_point(int index, double value);
  void add_point(double value);
  const ::google::protobuf::RepeatedField< double >&
      point() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:KDTreeRec.KDNodeRec)
 private:
  inline void set_has_isnode();
  inline void clear_has_isnode();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 index_;
  double axis_;
  ::google::protobuf::RepeatedField< double > point_;
  bool isnode_;
  friend void  protobuf_AddDesc_kdtree_2eproto();
  friend void protobuf_AssignDesc_kdtree_2eproto();
  friend void protobuf_ShutdownFile_kdtree_2eproto();

  void InitAsDefaultInstance();
  static KDNodeRec* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KDNodeRec

// required bool isNode = 1;
inline bool KDNodeRec::has_isnode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KDNodeRec::set_has_isnode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KDNodeRec::clear_has_isnode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KDNodeRec::clear_isnode() {
  isnode_ = false;
  clear_has_isnode();
}
inline bool KDNodeRec::isnode() const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.isNode)
  return isnode_;
}
inline void KDNodeRec::set_isnode(bool value) {
  set_has_isnode();
  isnode_ = value;
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.isNode)
}

// optional uint64 index = 2;
inline bool KDNodeRec::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KDNodeRec::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KDNodeRec::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KDNodeRec::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 KDNodeRec::index() const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.index)
  return index_;
}
inline void KDNodeRec::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.index)
}

// optional double axis = 3;
inline bool KDNodeRec::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KDNodeRec::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KDNodeRec::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KDNodeRec::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline double KDNodeRec::axis() const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.axis)
  return axis_;
}
inline void KDNodeRec::set_axis(double value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.axis)
}

// repeated double point = 4;
inline int KDNodeRec::point_size() const {
  return point_.size();
}
inline void KDNodeRec::clear_point() {
  point_.Clear();
}
inline double KDNodeRec::point(int index) const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.point)
  return point_.Get(index);
}
inline void KDNodeRec::set_point(int index, double value) {
  point_.Set(index, value);
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.point)
}
inline void KDNodeRec::add_point(double value) {
  point_.Add(value);
  // @@protoc_insertion_point(field_add:KDTreeRec.KDNodeRec.point)
}
inline const ::google::protobuf::RepeatedField< double >&
KDNodeRec::point() const {
  // @@protoc_insertion_point(field_list:KDTreeRec.KDNodeRec.point)
  return point_;
}
inline ::google::protobuf::RepeatedField< double >*
KDNodeRec::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:KDTreeRec.KDNodeRec.point)
  return &point_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace KDTreeRec

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kdtree_2eproto__INCLUDED
