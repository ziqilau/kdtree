// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kdtree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kdtree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KDTreeRec {

namespace {

const ::google::protobuf::Descriptor* KDNodeRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KDNodeRec_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kdtree_2eproto() {
  protobuf_AddDesc_kdtree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kdtree.proto");
  GOOGLE_CHECK(file != NULL);
  KDNodeRec_descriptor_ = file->message_type(0);
  static const int KDNodeRec_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDNodeRec, isnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDNodeRec, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDNodeRec, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDNodeRec, point_),
  };
  KDNodeRec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KDNodeRec_descriptor_,
      KDNodeRec::default_instance_,
      KDNodeRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDNodeRec, _has_bits_[0]),
      -1,
      -1,
      sizeof(KDNodeRec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDNodeRec, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kdtree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KDNodeRec_descriptor_, &KDNodeRec::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kdtree_2eproto() {
  delete KDNodeRec::default_instance_;
  delete KDNodeRec_reflection_;
}

void protobuf_AddDesc_kdtree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014kdtree.proto\022\tKDTreeRec\"G\n\tKDNodeRec\022\016"
    "\n\006isNode\030\001 \002(\010\022\r\n\005index\030\002 \001(\004\022\014\n\004axis\030\003 "
    "\001(\001\022\r\n\005point\030\004 \003(\001", 98);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kdtree.proto", &protobuf_RegisterTypes);
  KDNodeRec::default_instance_ = new KDNodeRec();
  KDNodeRec::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kdtree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kdtree_2eproto {
  StaticDescriptorInitializer_kdtree_2eproto() {
    protobuf_AddDesc_kdtree_2eproto();
  }
} static_descriptor_initializer_kdtree_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int KDNodeRec::kIsNodeFieldNumber;
const int KDNodeRec::kIndexFieldNumber;
const int KDNodeRec::kAxisFieldNumber;
const int KDNodeRec::kPointFieldNumber;
#endif  // !_MSC_VER

KDNodeRec::KDNodeRec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KDTreeRec.KDNodeRec)
}

void KDNodeRec::InitAsDefaultInstance() {
}

KDNodeRec::KDNodeRec(const KDNodeRec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KDTreeRec.KDNodeRec)
}

void KDNodeRec::SharedCtor() {
  _cached_size_ = 0;
  isnode_ = false;
  index_ = GOOGLE_ULONGLONG(0);
  axis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KDNodeRec::~KDNodeRec() {
  // @@protoc_insertion_point(destructor:KDTreeRec.KDNodeRec)
  SharedDtor();
}

void KDNodeRec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KDNodeRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KDNodeRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KDNodeRec_descriptor_;
}

const KDNodeRec& KDNodeRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kdtree_2eproto();
  return *default_instance_;
}

KDNodeRec* KDNodeRec::default_instance_ = NULL;

KDNodeRec* KDNodeRec::New(::google::protobuf::Arena* arena) const {
  KDNodeRec* n = new KDNodeRec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KDNodeRec::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KDNodeRec*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(index_, axis_);
    isnode_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KDNodeRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KDTreeRec.KDNodeRec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isNode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnode_)));
          set_has_isnode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_axis;
        break;
      }

      // optional double axis = 3;
      case 3: {
        if (tag == 25) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_point;
        break;
      }

      // repeated double point = 4;
      case 4: {
        if (tag == 33) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_point())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KDTreeRec.KDNodeRec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KDTreeRec.KDNodeRec)
  return false;
#undef DO_
}

void KDNodeRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KDTreeRec.KDNodeRec)
  // required bool isNode = 1;
  if (has_isnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnode(), output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // optional double axis = 3;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->axis(), output);
  }

  // repeated double point = 4;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KDTreeRec.KDNodeRec)
}

::google::protobuf::uint8* KDNodeRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KDTreeRec.KDNodeRec)
  // required bool isNode = 1;
  if (has_isnode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnode(), target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // optional double axis = 3;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->axis(), target);
  }

  // repeated double point = 4;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->point(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KDTreeRec.KDNodeRec)
  return target;
}

int KDNodeRec::ByteSize() const {
  int total_size = 0;

  // required bool isNode = 1;
  if (has_isnode()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional double axis = 3;
    if (has_axis()) {
      total_size += 1 + 8;
    }

  }
  // repeated double point = 4;
  {
    int data_size = 0;
    data_size = 8 * this->point_size();
    total_size += 1 * this->point_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KDNodeRec::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KDNodeRec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KDNodeRec>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KDNodeRec::MergeFrom(const KDNodeRec& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnode()) {
      set_isnode(from.isnode());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KDNodeRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KDNodeRec::CopyFrom(const KDNodeRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KDNodeRec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KDNodeRec::Swap(KDNodeRec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KDNodeRec::InternalSwap(KDNodeRec* other) {
  std::swap(isnode_, other->isnode_);
  std::swap(index_, other->index_);
  std::swap(axis_, other->axis_);
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KDNodeRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KDNodeRec_descriptor_;
  metadata.reflection = KDNodeRec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KDNodeRec

// required bool isNode = 1;
bool KDNodeRec::has_isnode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KDNodeRec::set_has_isnode() {
  _has_bits_[0] |= 0x00000001u;
}
void KDNodeRec::clear_has_isnode() {
  _has_bits_[0] &= ~0x00000001u;
}
void KDNodeRec::clear_isnode() {
  isnode_ = false;
  clear_has_isnode();
}
 bool KDNodeRec::isnode() const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.isNode)
  return isnode_;
}
 void KDNodeRec::set_isnode(bool value) {
  set_has_isnode();
  isnode_ = value;
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.isNode)
}

// optional uint64 index = 2;
bool KDNodeRec::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KDNodeRec::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void KDNodeRec::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void KDNodeRec::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 KDNodeRec::index() const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.index)
  return index_;
}
 void KDNodeRec::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.index)
}

// optional double axis = 3;
bool KDNodeRec::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KDNodeRec::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
void KDNodeRec::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
void KDNodeRec::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
 double KDNodeRec::axis() const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.axis)
  return axis_;
}
 void KDNodeRec::set_axis(double value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.axis)
}

// repeated double point = 4;
int KDNodeRec::point_size() const {
  return point_.size();
}
void KDNodeRec::clear_point() {
  point_.Clear();
}
 double KDNodeRec::point(int index) const {
  // @@protoc_insertion_point(field_get:KDTreeRec.KDNodeRec.point)
  return point_.Get(index);
}
 void KDNodeRec::set_point(int index, double value) {
  point_.Set(index, value);
  // @@protoc_insertion_point(field_set:KDTreeRec.KDNodeRec.point)
}
 void KDNodeRec::add_point(double value) {
  point_.Add(value);
  // @@protoc_insertion_point(field_add:KDTreeRec.KDNodeRec.point)
}
 const ::google::protobuf::RepeatedField< double >&
KDNodeRec::point() const {
  // @@protoc_insertion_point(field_list:KDTreeRec.KDNodeRec.point)
  return point_;
}
 ::google::protobuf::RepeatedField< double >*
KDNodeRec::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:KDTreeRec.KDNodeRec.point)
  return &point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace KDTreeRec

// @@protoc_insertion_point(global_scope)
